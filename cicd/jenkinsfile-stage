pipeline {
    agent any
   
    stages{
        stage('Tag Docker Image'){
            steps{
                sh "docker tag quay.io/alanadiprastyo/test-apps-vuln:latest quay.io/alanadiprastyo/test-apps-vuln:v1-testing.${env.BUILD_ID}"
		sh "docker tag quay.io/alanadiprastyo/test-apps-vuln:latest quay.io/alanadiprastyo/test-apps-vuln:testing"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:v1-testing.${env.BUILD_ID}"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:testing"
            }
        }
	stage('Deploy to Stage'){
                input {
                	message "Deploy to Stage Area?"
                	ok "Yes, Deploy to Staging"
            	}
		steps{
			echo "Deploy to Stage"
			sh "oc login -u kubeadmin -p APBEh-jjrVy-hLQZX-VI9Kg https://api.crc.testing:6443"
                        sh "sed -i s/UPDATE/v1-testing.${env.BUILD_ID}/g deployments/devsecops-stage.yaml"
                        sh "oc apply -f deployments/devsecops-stage.yaml"
	
		}
	  	post{
                	success {
                    		echo 'Success deploy to staging'
                	}
               		failure {
                    		echo 'Failed deploy to staging'
                	}
	  }

	}    
	stage('DAST NMAP'){
		steps{
			echo "Scan use NMAP"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137  -v \$(pwd):/tmp uzyexe/nmap devsecops-stage-devsecops-stage.apps-crc.testing > nmap_out.txt  || true"
			sh "/usr/bin/nmap -v --script vuln devsecops-stage-devsecops-stage.apps-crc.testing -oX nmap_out.xml || true"
		    	archiveArtifacts artifacts: 'nmap_out.xml', onlyIfSuccessful: true //fingerprint: true
		}
	}
	stage('DAST Nikto'){
		steps{
			echo "Scan use Nikto"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 -v \$(pwd):/tmp alpine/nikto -h devsecops-stage-devsecops-stage.apps-crc.testing > nikto.txt  || true"
			sh "/usr/local/bin/nikto.pl --o nikto_scan_result.html -Format html -h http://devsecops-stage-devsecops-stage.apps-crc.testing"
		    	archiveArtifacts artifacts: 'nikto_scan_result.html', onlyIfSuccessful: true //fingerprint: true
		}
	}
	stage('DAST Owasp Zap'){
		steps{
			echo "Scan use Owasp ZAP"
			//sh "docker run --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 --rm  -v \$(pwd):/tmp owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 -v \$(pwd):/tmp owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing > zap.txt  || true"
               		 sh "echo \$(pwd)"
                	 sh "chmod 777 \$(pwd)"
                	 sh "docker run  --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137  -w /zap -v \$(pwd):/zap/wrk:rw --rm owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing -J zap-output.json"
			archiveArtifacts artifacts: 'zap-output.json', onlyIfSuccessful: true //fingerprint: true
		}
	}
    }
}

