//deklarasi variable
def imageLineDev = ""

pipeline {
    agent any
   
    stages{
        stage('Checkout'){
            steps {
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/alanadiprastyo/demo-devsecops.git']]])
            }
        }
        stage('Dependency Check with Python Safety'){
            steps{
               		//sh "docker run -v \$(pwd):/src --rm hysnsec/safety check -r app/requirements.txt --json > sca-scaning-safety.json  || true"
			sh "/usr/local/bin/safety check -r app/requirements.txt --json > sca-scaning-safety.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-safety.json', onlyIfSuccessful: true //fingerprint: true
	}
        }
        stage('Static Analysis with python-taint'){
            steps{
		    	echo "SCA test Python Taint"
               		//sh "docker run -v \$(pwd):/src --rm vickyrajagopal/python-taint-docker pyt . -j > sca-scaning-pyt.json  || true"
			sh "/usr/local/bin/pyt app/ -j > sca-scaning-pyt.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-pyt.json', onlyIfSuccessful: true //fingerprint: true
			
	}
        }
        stage('Python Bandit Security Scan'){
            steps{
		    	echo "SAST test Python Bandit"
               		//sh "docker run -v \$(pwd):/src --rm secfigo/bandit:latest bandit . -f json > sca-scaning-bandit.json  || true"
			sh "/usr/local/bin/bandit -r app/ -f json  > sca-scaning-bandit.json  || true"
		    	archiveArtifacts artifacts: 'sca-scaning-bandit.json', onlyIfSuccessful: true //fingerprint: true
			
	}
        }
      stage('Static Analysis with SonarQube') {
   	steps {
       		script {
		   sh '''/var/lib/jenkins/sonar-scanner/bin/sonar-scanner \
		   -Dsonar.projectKey=demo-devsecops \
		   -Dsonar.sources=. \
		   -Dsonar.css.node=. \
		   -Dsonar.host.url=http://192.168.1.31:9000\
		   -Dsonar.login=44c1e369a8e63f387d0935b95e1f4ddb018ec593'''
              		}
       		}
	}
        stage('Build Docker Image'){
            steps{
                sh "docker build -t test-apps-vuln ."
                sh "docker tag test-apps-vuln quay.io/alanadiprastyo/test-apps-vuln:v1.${env.BUILD_ID}"
		sh "docker tag test-apps-vuln quay.io/alanadiprastyo/test-apps-vuln:latest"
            }
        }
        stage('Push Docker Image to Quay'){
            steps{
                sh "docker push quay.io/alanadiprastyo/test-apps-vuln:v1.${env.BUILD_ID}"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:latest"
            }
        }

        stage('Scan Image with anchore'){
		steps{	
			sh "echo 'scan image docker use ancore'"
			script {
			imageLineDev = 'quay.io/alanadiprastyo/demo-django:latest'
			writeFile file: 'anchore_images', text: imageLineDev
			anchore name: 'anchore_images'
			}
		}
       }

	stage('Deploy to Dev'){
		steps{
			echo "Deploy to Dev"
			sh "oc login -u kubeadmin -p APBEh-jjrVy-hLQZX-VI9Kg https://api.crc.testing:6443"
			sh "sed -i s/UPDATE/v1.${env.BUILD_ID}/g deployments/devsecops-dev.yaml"
			sh "oc apply -f deployments/devsecops-dev.yaml"
		}
	}

        stage('Tag Docker Image'){
            steps{
                sh "docker tag quay.io/alanadiprastyo/test-apps-vuln:latest quay.io/alanadiprastyo/test-apps-vuln:v1-testing.${env.BUILD_ID}"
		sh "docker tag quay.io/alanadiprastyo/test-apps-vuln:latest quay.io/alanadiprastyo/test-apps-vuln:testing"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:v1-testing.${env.BUILD_ID}"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:testing"
            }
        }
	stage('Deploy to Stage'){
                input {
                	message "Deploy to Stage Area?"
                	ok "Yes, Deploy to Staging"
            	}
		steps{
			echo "Deploy to Stage"
			sh "oc login -u kubeadmin -p APBEh-jjrVy-hLQZX-VI9Kg https://api.crc.testing:6443"
                        sh "sed -i s/UPDATE/v1-testing.${env.BUILD_ID}/g deployments/devsecops-stage.yaml"
                        sh "oc apply -f deployments/devsecops-stage.yaml"
	
		}
	  	post{
                	success {
                    		echo 'Success deploy to staging'
                	}
               		failure {
                    		echo 'Failed deploy to staging'
                	}
	  }

	}    
	stage('DAST Nikto'){
		steps{
			echo "Scan use Nikto"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 -v \$(pwd):/tmp alpine/nikto -h devsecops-stage-devsecops-stage.apps-crc.testing > nikto.txt  || true"
			sh "/usr/local/bin/nikto.pl --o nikto_scan_result.html -Format html -h http://devsecops-stage-devsecops-stage.apps-crc.testing"
		    	archiveArtifacts artifacts: 'nikto_scan_result.html', onlyIfSuccessful: true //fingerprint: true
		}
	}
	stage('DAST Owasp Zap'){
		steps{
			echo "Scan use Owasp ZAP"
			//sh "docker run --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 --rm  -v \$(pwd):/tmp owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137 -v \$(pwd):/tmp owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing > zap.txt  || true"
               		 sh "echo \$(pwd)"
                	 sh "chmod 777 \$(pwd)"
                	 sh "docker run  --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137  -w /zap -v \$(pwd):/zap/wrk:rw --rm owasp/zap2docker-stable zap-baseline.py -t http://devsecops-stage-devsecops-stage.apps-crc.testing -J zap-output.json || true"
			archiveArtifacts artifacts: 'zap-output.json', onlyIfSuccessful: true //fingerprint: true
		}
	}

	stage('DAST NMAP'){
		steps{
			echo "Scan use NMAP"
			//sh "docker run --rm --add-host devsecops-stage-devsecops-stage.apps-crc.testing:192.168.1.137  -v \$(pwd):/tmp uzyexe/nmap devsecops-stage-devsecops-stage.apps-crc.testing > nmap_out.txt  || true"
			sh "/usr/bin/nmap -v --script vuln devsecops-stage-devsecops-stage.apps-crc.testing -oX nmap_out.xml || true"
		    	archiveArtifacts artifacts: 'nmap_out.xml', onlyIfSuccessful: true //fingerprint: true
		}
	}

        stage('Tag Docker Image to Prod'){
            steps{
                sh "docker tag quay.io/alanadiprastyo/test-apps-vuln:testing quay.io/alanadiprastyo/test-apps-vuln:v1-prod.${env.BUILD_ID}"
		sh "docker push quay.io/alanadiprastyo/test-apps-vuln:v1-prod.${env.BUILD_ID}"
            }
        }
	stage('Deploy to Prod'){
                input {
                	message "Deploy to Production?"
                	ok "Yes, Deploy to Production"
            	}
		steps{
			echo "Deploy to Prod"
			sh "oc login -u kubeadmin -p APBEh-jjrVy-hLQZX-VI9Kg https://api.crc.testing:6443"
                        sh "sed -i s/UPDATE/v1-prod.${env.BUILD_ID}/g deployments/devsecops-prod.yaml"
                        sh "oc apply -f deployments/devsecops-prod.yaml"
	
		}
	  	post{
                	success {
                    		echo 'Success deploy to prod'
                	}
               		failure {
                    		echo 'Failed deploy to prod'
                	}
	  }

	}
	stage('Deploy WAF to Production'){
	     steps{
		echo "Deploy WAF to production"
		echo "access to http://192.168.1.137:8090/"
	    }
	}    

	}

}



