pipeline {
    agent any

    stages {
        stage('Checkout'){
            steps {
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/alanadiprastyo/demo-devsecops.git']]])
            }
        }
        stage('Secret Detection') {
            steps {
                echo 'Secret Detection'
                sh "trivy fs --scanners secret .  || true"
                sh "trivy fs --scanners secret . -f json -o secret-detection.json  || true"
		    	archiveArtifacts artifacts: 'secret-detection.json', onlyIfSuccessful: true //fingerprint: true
            }
        }
        stage('Dependency Check') {
            steps {
                echo 'Dependency Check'
                sh 'trivy fs --scanners vuln . || true'
                sh "trivy fs --scanners vuln . -f json -o dependency-check.json  || true"
		    	archiveArtifacts artifacts: 'dependency-check.json', onlyIfSuccessful: true //fingerprint: true
            }
        }
        stage('Quality Code Check') {
            steps {
                echo 'Static Analysis Security Testing'
                script {
                    sh ''' /var/lib/jenkins/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=demo-devsecops -Dsonar.sources=. -Dsonar.host.url=http://10.8.60.21:9000 -Dsonar.token=sqp_42de4acef23aa8c795453c329e2225428d800455'''
                }
            }
        }
        stage('Miscofiguration Check') {
            steps {
                echo 'Misconfiguration Check'
                sh 'trivy config  . || true'
                sh "trivy config . -f json -o misconf-check.json  || true"
		    	archiveArtifacts artifacts: 'misconf-check.json', onlyIfSuccessful: true //fingerprint: true
            }
        }
        stage('Build Docker Image'){
            steps{
                sh "docker build -t demo-devsecops-flask ."
                sh "docker tag demo-devsecops-flask registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:v1.${env.BUILD_ID}"
		        sh "docker tag demo-devsecops-flask registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:latest"
            }
        }
        stage('Image Scanning'){
		steps{	
			echo 'Image Scanning'
			sh "trivy image  registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:v1.${env.BUILD_ID} || true"
            sh "trivy image  registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:v1.${env.BUILD_ID} -f json -o image-scan.json  || true"
		    archiveArtifacts artifacts: 'image-scan.json', onlyIfSuccessful: true //fingerprint: true
		}
       }
        stage('Push to Nexus'){
            steps{
                sh "docker push registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:v1.${env.BUILD_ID}"
		        sh "docker push registry.i-3.my.id:5000/jaguar/demo-devsecops-flask:latest"
            }
        }
        stage('Deploy to Openshift'){
                input {
                	message "Deploy to Development?"
                	ok "Yes, Deploy to Development"
            	}
            steps{
                echo 'Login to OCP'
		        sh "oc login --insecure-skip-tls-verify=true --token=sha256~DauKQCyGoB0iEGHh-ZmqdRapNAvEH4V4csD7vv341Jc --server=https://api.lab.i3datacenter.my.id:6443"
                sh "sed -i s/UPDATE/v1.${env.BUILD_ID}/g deployments/devsecops-demo.yaml"
			    sh "oc apply -f deployments/devsecops-demo.yaml"
            }
        }
    }
}
